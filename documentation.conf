extensionName = "csv"
markdownTemplate = """
# NetLogo CSV extension

This NetLogo extension adds CSV parsing capabilities to models.

{{> BUILDING.md}}

{{> USING.md}}

## Primitives

{{#contents}}

### {{fullCategoryName}}

{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}

{{/contents}}

{{#primitives}}
{{> primTemplate}}
{{/primitives}}
"""
primTemplate = """
### `{{name}}`

```NetLogo
{{#examples}}
{{primitive.fullName}}{{#args}} {{name}}{{/args}}
{{/examples}}
```

{{{description}}}
"""

filesToIncludeInManual = [ "USING.md", "primitives" ]
tableOfContents = {
  "parsing": "Parsing CSV input to NetLogo data",
  "writing": "Formatting NetLogo data as CSV"
}
primitives = [
  {
    name: from-row,
    type: reporter,
    returns: list,
    arguments: [ { type: string} ],
    alternateArguments: [ { type: string }, { name: delimiter, type: optional string } ],
    tags: [parsing],
    description: """
Parses the given string as though it were a row from a CSV file and returns it as a list of values. For example:

```NetLogo
observer> show csv:from-row "one,two,three"
observer: ["one" "two" "three"]
```

Quotes can be used when items contain commas:

```NetLogo
observer> show csv:from-row "there's,a,comma,\"in,here\""
observer: ["there's" "a" "comma" "in,here"]
```

You can put two quotes in a row to put an actual quote in an entry. If the entry is not quoted, you can just use one quote:

```NetLogo
observer> foreach (csv:from-row "he said \"hi there\",\"afterwards, she said \"\"hello\"\"\"") print
he said "hi there"
afterwards, she said "hello"
```

Number-like-entries will be parsed as numbers:

```NetLogo
observer> show csv:from-row "1,-2.5,1e3"
observer: [1 -2.5 1000]
```

`true` and `false` with any capitalization will be parsed as booleans:

```NetLogo
observer> show csv:from-row "true,TRUE,False,falsE"
observer: [true true false false]
```

To use a different delimiter, you can specify a second, optional argument. Only single character delimiters are supported:

```NetLogo
observer> show (csv:from-row "1;2;3" ";")
observer: [1 2 3]
```

Different types of values can be mixed freely:

``` NetLogo
observer> show csv:from-row "one,2,true"
observer: ["one" 2 true]
```
    """
  },
  {
    name: from-string,
    type: reporter,
    returns: list,
    arguments: [ { type: string } ],
    alternateArguments: [ { type: string }, { name: delimiter, type: string } ],
    tags: [parsing],
    description: """
Parses a string representation of one or more CSV rows and returns it as a list of lists of values. For example:

```NetLogo
observer> show csv:from-string "1,two,3\nfour,5,true"
observer: [[1 "two" 3] ["four" 5 true]]
```"""
  },
  {
    name: from-file,
    type: reporter,
    returns: list,
    arguments: [ { name: csv-file, type: string } ],
    alternateArguments: [ { name: csv-file, type: string }, { name: delimiter, type: string } ],
    tags: [parsing],
    description: """
Parses an entire CSV file to a list of lists of values. For example, if we have a file `example.csv` that contains:

    1,2,3
    4,5,6
    7,8,9
    10,11,12

Then, we get:

```NetLogo
observer> show csv:from-file "example.csv"
observer: [[1 2 3] [4 5 6] [7 8 9] [10 11 12]]
```

The parser doesn't care if the rows have different numbers of items on them. The number of items in the rows list
will always be `<number of delimiters> + 1`, though blank lines are skipped. This makes handling files with headers
quite easy. For instance, if we have `header.csv` that contains:

    My Data
    2/1/2015

    Parameters:
    start,stop,resolution,population,birth?
    0,4,1,100,true

    Data:
    time,x,y
    0,0,0
    1,1,1
    2,4,8
    3,9,27


This gives:

```NetLogo
observer> foreach csv:from-file "header.csv" show
observer: ["My Data"]
observer: ["2/1/2015"]
observer: ["Parameters:"]
observer: ["start" "stop" "resolution" "population" "birth?"]
observer: [0 4 1 100 true]
observer: ["Data:"]
observer: ["time" "x" "y"]
observer: [0 0 0]
observer: [1 1 1]
observer: [2 4 8]
observer: [3 9 27]
```"""
  },
  {
    name: to-row,
    type: reporter,
    returns: string,
    arguments: [ { type: list } ],
    alternateArguments: [ { type: list}, { name: delimiter, type: string } ],
    tags: [ "writing" ],
    description: """
Reports the given list as a CSV row. For example:

```NetLogo
observer> show csv:to-row ["one" 2 true]
observer: "one,2,true"
```"""
  },
  {
    name: to-string,
    type: reporter,
    returns: string,
    arguments: [ { type: list } ],
    alternateArguments: [ { type: list}, { name: delimiter, type: string } ],
    tags: [ "writing" ],
    description: """
Reports the given list of lists as a CSV string. For example:

```NetLogo
observer> show csv:to-string [[1 "two" 3] [4 5]]
observer: "1,two,3\n4,5"
```"""
  },
  {
    name: to-file,
    type: command,
    arguments: [ { name: csv-file, type: string }, { type: list } ],
    alternateArguments: [ { name: csv-file, type: string }, { type: list }, { name: delimiter, type: string } ],
    tags: [ "writing" ],
    description: """
Writes the given list of lists to a new CSV file. For example:

```NetLogo
observer> csv:to-file "myfile.csv" [[1 "two" 3] [4 5]]
```

will result in a file `myfile.csv` containing:

    1,two,3
    4,5
"""
  }
]
